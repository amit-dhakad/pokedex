{"version":3,"sources":["components/pokecard/pokecard.js","components/pokedex/pokedex.js","components/pokegame/pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","imgSrc","concat","this","props","id","slice","react_default","a","createElement","className","name","src","alt","type","exp","Component","Pokedex","title","isWinner","pokemon","map","pokecard_pokecard","key","Pokegame","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","i","fetch","Math","floor","random","then","res","json","result","setState","toConsumableArray","types","base_experience","error","console","log","hand1","hand2","length","randIdx","randPokemon","splice","push","exp1","reduce","exp2","page","pokedex_pokedex","App","pokegame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gTAwBeA,0LAdX,IAHaC,EAGTC,EAAM,GAAAC,OALA,4DAKAA,QAHGF,EAGyBG,KAAKC,MAAMC,KAHf,IAAM,KAAAH,OAAKF,GAASM,OAAO,GAAKN,EAGxD,QACV,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,IAAiCP,KAAKC,MAAMO,KAA5C,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKG,IAAKX,EAAQY,IAAKV,KAAKC,MAAMO,QAEpCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,SAAsCP,KAAKC,MAAMU,MACjDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,QAAqCP,KAAKC,MAAMW,aAVjCC,cCuBRC,0LA1BX,IAAIC,EAOJ,OAJEA,EADEf,KAAKC,MAAMe,SACLZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,eAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,cAGRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZQ,EACDX,EAAAC,EAAAC,cAAA,uBAAeN,KAAKC,MAAMW,KAC1BR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZP,KAAKC,MAAMgB,QAAQC,IAAI,SAAAD,GAAO,OAC7Bb,EAAAC,EAAAC,cAACa,EAAD,CACEC,IAAKH,EAAQf,GACbM,KAAMS,EAAQT,KACdN,GAAIe,EAAQf,GACZS,KAAMM,EAAQN,KACdC,IAAKK,EAAQL,iBApBLC,cC4DPQ,cA3Db,SAAAA,EAAYpB,GAAO,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAvB,KAAAqB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA3B,KAAMC,KACD2B,MAAQ,CACXX,QAAS,IAHMK,mFAOjB,IADkB,IAAAO,EAAA7B,KACT8B,EAAI,EAAGA,EAAI,EAAGA,IACrBC,MACE,qCAAuCC,KAAKC,MAAsB,IAAhBD,KAAKE,WAEtDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAAAG,GACET,EAAKU,SAAS,CACZtB,QAAO,GAAAlB,OAAAwB,OAAAiB,EAAA,EAAAjB,CACFM,EAAKD,MAAMX,SADT,CAEL,CACEf,GAAIoC,EAAOpC,GACXS,KAAM2B,EAAOG,MAAM,GAAG9B,KAAKH,KAC3BA,KAAM8B,EAAO9B,KACbI,IAAK0B,EAAOI,sBAKpB,SAAAC,GACEC,QAAQC,IAAI,UAAWF,sCAW/B,IALO,IACC1B,EAAYjB,KAAK4B,MAAjBX,QACJ6B,EAAQ,GACRC,EAAKxB,OAAAiB,EAAA,EAAAjB,CAAON,GAET6B,EAAME,OAASD,EAAMC,QAAQ,CAClC,IAAIC,EAAUjB,KAAKC,MAAMD,KAAKE,SAAWa,EAAMC,QAC3CE,EAAcH,EAAMI,OAAOF,EAAS,GAAG,GAC3CH,EAAMM,KAAKF,GAEb,IAAIG,EAAOP,EAAMQ,OAAO,SAAC1C,EAAKK,GAAN,OAAkBL,EAAMK,EAAQL,KAAK,GACzD2C,EAAOR,EAAMO,OAAO,SAAC1C,EAAKK,GAAN,OAAkBL,EAAMK,EAAQL,KAAK,GAEzD4C,EACFpD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmD,EAAD,CAASxC,QAAS6B,EAAOlC,IAAKyC,EAAMrC,SAAUqC,EAAOE,IACrDnD,EAAAC,EAAAC,cAACmD,EAAD,CAASxC,QAAS8B,EAAOnC,IAAK2C,EAAMvC,SAAUuC,EAAOF,KAMzD,OAHkC,IAA9BrD,KAAK4B,MAAMX,QAAQ+B,SACrBQ,EAAOpD,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWiD,UAxDd3C,aCQR6C,MARf,WACE,OACEtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqD,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.142596f6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './pokecard.css';\n/* const POKE_API =\n  'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/';\n */\nconst POKE_API = `https://assets.pokemon.com/assets/cms2/img/pokedex/full/`;\n\nlet padToThree = number => (number <= 999 ? `00${number}`.slice(-3) : number);\nclass Pokecard extends Component {\n  render() {\n    let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`;\n    return (\n      <div className=\"Pokecard\">\n        <h1 className=\"Pokecard-title\"> {this.props.name} </h1>\n        <div className=\"Pokecard-image\">\n          <img src={imgSrc} alt={this.props.name} />\n        </div>\n        <div className=\"Pokecard-data\">Type: {this.props.type}</div>\n        <div className=\"Pokecard-data\">Exp: {this.props.exp}</div>\n      </div>\n    );\n  }\n}\n\nexport default Pokecard;\n","import React, { Component } from 'react';\nimport Pokecard from '../pokecard/pokecard';\nimport './pokedex.css';\nclass Pokedex extends Component {\n  render() {\n    let title;\n\n    if (this.props.isWinner) {\n      title = <h1 className=\"Pokemon-winner\">Winner Hand</h1>;\n    } else {\n      title = <h1 className=\"Pokemon-loser\">Loser Hand</h1>;\n    }\n    return (\n      <div className=\"Pokedex\">\n        {title}\n        <p>Total exp: {this.props.exp}</p>\n        <div className=\"Pokedex-cards\">\n          {this.props.pokemon.map(pokemon => (\n            <Pokecard\n              key={pokemon.id}\n              name={pokemon.name}\n              id={pokemon.id}\n              type={pokemon.type}\n              exp={pokemon.exp}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Pokedex;\n","import React, { Component } from 'react';\nimport Pokedex from '../pokedex/pokedex';\n\nclass Pokegame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pokemon: []\n    };\n  }\n  componentDidMount() {\n    for (var i = 0; i < 8; i++) {\n      fetch(\n        'https://pokeapi.co/api/v2/pokemon/' + Math.floor(Math.random() * 809)\n      )\n        .then(res => res.json())\n        .then(\n          result => {\n            this.setState({\n              pokemon: [\n                ...this.state.pokemon,\n                {\n                  id: result.id,\n                  type: result.types[0].type.name,\n                  name: result.name,\n                  exp: result.base_experience\n                }\n              ]\n            });\n          },\n          error => {\n            console.log('error: ', error);\n          }\n        );\n    }\n  }\n\n  render() {\n    const { pokemon } = this.state;\n    let hand1 = [];\n    let hand2 = [...pokemon];\n\n    while (hand1.length < hand2.length) {\n      let randIdx = Math.floor(Math.random() * hand2.length);\n      let randPokemon = hand2.splice(randIdx, 1)[0];\n      hand1.push(randPokemon);\n    }\n    let exp1 = hand1.reduce((exp, pokemon) => exp + pokemon.exp, 0);\n    let exp2 = hand2.reduce((exp, pokemon) => exp + pokemon.exp, 0);\n\n    let page = (\n      <div>\n        <Pokedex pokemon={hand1} exp={exp1} isWinner={exp1 > exp2} />\n        <Pokedex pokemon={hand2} exp={exp2} isWinner={exp2 > exp1} />\n      </div>\n    );\n    if (this.state.pokemon.length !== 8) {\n      page = <h1>Loading</h1>;\n    }\n    return <div className=\"wrapper\">{page}</div>;\n  }\n}\n\nexport default Pokegame;\n","import React from 'react';\nimport './App.css';\nimport Pokegame from './components/pokegame/pokegame';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}